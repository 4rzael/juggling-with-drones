<?xml version="1.0"?>
<launch>
  <arg name="uri0" default="radio://0/80/250K/E7E7E7E701"/>
  <arg name="uri1" default="radio://0/80/250K/E7E7E7E702"/>
  <arg name="uri2" default="radio://0/80/250K/E7E7E7E703"/>
  <arg name="uri3" default="radio://0/80/250K/E7E7E7E704"/>
  <arg name="uri4" default="radio://0/80/250K/E7E7E7E705"/>

  <arg name="namespace_input_manager_0" default="input_manager_0"/>
  <arg name="namespace_input_manager_1" default="input_manager_1"/>

  <arg name="namespace_swarm" default="swarm"/>

  <arg name="namespace_crazyflie_0" default="crazyflie_0"/>
  <arg name="namespace_crazyflie_1" default="crazyflie_1"/>

  <arg name="frame" default="base_link" />

  <rosparam command="load" file="$(find juggling_demo)/data/anchor_pos.yaml" />

  <param name="robot_description" command="$(find xacro)/xacro.py $(find crazyflie_description)/urdf/crazyflie2.urdf.xacro" />

  <node name="rviz" pkg="rviz" type="rviz"
        args="-d $(find juggling_demo)/data/razer_one_drone.rviz"/>

  <node pkg="tf" type="static_transform_publisher" name="link1_broadcaster"
        args="1 0 0 0 0 0 1 world lps 100" />



  <include file="$(find razer_hydra)/launch/hydra.launch" />

  <!-- INPUT MANAGERS -->
  <group ns="$(arg namespace_input_manager_0)">
    <node pkg="juggling_controller" type="HydraMapper.py" name="hydra_mapper">
      <param name="input_id" value="0"/>
    </node>

    <node pkg="juggling_controller" type="Controller.py" name="controller">
      <param name="controller_id" value="0"/>
    </node>
  </group>


  <group ns="$(arg namespace_input_manager_1)">
    <node pkg="juggling_controller" type="HydraMapper.py" name="hydra_mapper">
      <param name="input_id" value="1"/>
    </node>

    <node pkg="juggling_controller" type="Controller.py" name="controller">
      <param name="controller_id" value="1"/>
    </node>
  </group>


    <node pkg="juggling_swarm_manager" type="SwarmManager.py" name="swarm_manager">
      <param name="drone_prefixes" value="[$(arg namespace_crazyflie_0), $(arg namespace_crazyflie_1)]"/>
    </node>


  <group ns="$(arg namespace_crazyflie_0)">
    <rosparam command="load" file="$(find bitcraze_lps_estimator)/data/anchor_pos.yaml" />

    <node pkg="crazyflie_driver" type="crazyflie_add" name="crazyflie_add" output="screen">
      <param name="uri" value="$(arg uri0)" />
      <param name="tf_prefix" value="$(arg namespace_crazyflie_0)" />
      <rosparam>
        genericLogTopics: ["log_kfpos", "log_kfqt", "log_ranges"]
        genericLogTopicFrequencies: [30, 30, 30]
        genericLogTopic_log_kfpos_Variables: ["kalman.stateX", "kalman.stateY", "kalman.stateZ"]
        genericLogTopic_log_kfqt_Variables: ["kalman.q0", "kalman.q1", "kalman.q2", "kalman.q3"]
        genericLogTopic_log_ranges_Variables: ["ranging.distance0", "ranging.distance1", "ranging.distance2", "ranging.distance3", "ranging.distance4", "ranging.distance5", "ranging.state"]
      </rosparam>
    </node>

    <node pkg="crazyflie_trajectory_manager" type="examples.py" name="trajectory_manager">
    </node>

    <node name="controller_bridge" pkg="bitcraze_lps_estimator" type="crazyflie_controller_bridge.py" output="screen"/>

    <node name="lps_efk_bridge" pkg="bitcraze_lps_estimator" type="lps_ekf_bridge.py" output="screen"/>

    <node name="lps_viz" pkg="bitcraze_lps_estimator" type="lps_viz.py" />

    <node name="log_range" pkg="bitcraze_lps_estimator" type="log_range.py" />

  </group>


  <include file="$(find crazyflie_driver)/launch/crazyflie_server.launch" />
</launch>
